From dcb010892b2e308e1b3bd3b41a8c65f895c04629 Mon Sep 17 00:00:00 2001
From: JT <95458994+jvodlz@users.noreply.github.com>
Date: Mon, 9 Sep 2024 16:12:29 +1200
Subject: [PATCH 1/3] modified to add showGraph property

---
 src/App.tsx | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..17e96b1 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,7 +31,8 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) 
+      return (<Graph data={this.state.data} />)
   }
 
   /**
@@ -59,7 +62,7 @@ class App extends Component<{}, IState> {
             // As part of your task, update the getDataFromServer() function
             // to keep requesting the data every 100ms until the app is closed
             // or the server does not return anymore data.
-            onClick={() => {this.getDataFromServer()}}>
+            onClick={() => { this.getDataFromServer() }}>
             Start Streaming Data
           </button>
           <div className="Graph">
-- 
2.37.0.windows.1


From b7c37c0e842b114327a0e422128e2bb5fdb96491 Mon Sep 17 00:00:00 2001
From: JT <95458994+jvodlz@users.noreply.github.com>
Date: Wed, 11 Sep 2024 16:23:10 +1200
Subject: [PATCH 2/3] update getDataFromServer

---
 src/App.tsx | 18 +++++++++++++-----
 1 file changed, 13 insertions(+), 5 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 17e96b1..5280101 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -39,11 +39,19 @@ class App extends Component<{}, IState> {
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        this.setState({
+          data: serverResponds,
+          showGraph: true,
+        });
+      });
+      x++;
+      if (x > 1000) {
+        clearInterval(interval);
+      }
+    }, 100);
   }
 
   /**
-- 
2.37.0.windows.1


From 626d2ab7d02f5d85e119353b20825fc7ed7c3dcf Mon Sep 17 00:00:00 2001
From: JT <95458994+jvodlz@users.noreply.github.com>
Date: Wed, 11 Sep 2024 17:31:43 +1200
Subject: [PATCH 3/3] generate and update graph

---
 src/App.tsx   |  1 +
 src/Graph.tsx | 10 ++++++++--
 2 files changed, 9 insertions(+), 2 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 5280101..57383ad 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -39,6 +39,7 @@ class App extends Component<{}, IState> {
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
+
     let x = 0;
     const interval = setInterval(() => {
       DataStreamer.getData((serverResponds: ServerRespond[]) => {
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..33fe3ac 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,8 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    // const elem:PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,6 +50,11 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('aggregates', '{"stock":"distinct_count", "top_ask_price":"avg", "top_bid_price":"avg", "timestamp":"distinct_count"}');
     }
   }
 
-- 
2.37.0.windows.1

